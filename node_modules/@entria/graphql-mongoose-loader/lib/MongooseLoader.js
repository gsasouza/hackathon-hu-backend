'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * Helper to batch queries on mongoose
 * 
 */
function indexResults(results, indexField) {
  var cacheKeyFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (key) {
    return key;
  };

  var indexedResults = new Map();
  results.forEach(function (res) {
    indexedResults.set(cacheKeyFn(res[indexField]), res);
  });
  return indexedResults;
}

function normalizeResults(keys, indexField) {
  var cacheKeyFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (key) {
    return key;
  };

  return function (results) {
    var indexedResults = indexResults(results, indexField, cacheKeyFn);
    return keys.map(function (val) {
      return indexedResults.get(cacheKeyFn(val)) || new Error('Key not found : ' + val);
    });
  };
}

var cacheKeyFn = exports.cacheKeyFn = function cacheKeyFn(key) {
  return key.toString();
};

// TODO add types to mongoose

exports.default = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(model, ids) {
    var results;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return model.find({ _id: { $in: ids } });

          case 2:
            results = _context.sent;
            return _context.abrupt('return', normalizeResults(ids, '_id', cacheKeyFn)(results));

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();