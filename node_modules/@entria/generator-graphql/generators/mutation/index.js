'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

var _config = require('../config');

var _ejsHelpers = require('../ejsHelpers');

var _paths = require('../paths');

var _mongoose = require('../parser/mongoose');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MutationGenerator extends _yeomanGenerator2.default {
  constructor(args, options) {
    super(args, options);

    this.argument('name', {
      type: String,
      required: true
    });

    this.argument('model', {
      type: Object,
      required: false
    });

    this.destinationDir = (0, _config.getConfigDir)('mutation');
  }

  _mutationPath(name) {
    return `${this.destinationDir}/${name}Mutation.js`;
  }

  _parseSchema(schema, deps) {
    // Remove `GraphQLString` dependency from import if it exists,
    // it's already hard-coded on `MutationAdd` template.
    const addDependencies = deps.dependencies.filter(dep => ['GraphQLString'].indexOf(dep) === -1);

    // Also remove `GraphQLString`, `GraphQLNonNull` & `GraphQLID` dependencies
    // from import if they exist, they are already hard-coded on `MutationEdit` template.
    const editDependencies = deps.dependencies.filter(dep => ['GraphQLString', 'GraphQLNonNull', 'GraphQLID'].indexOf(dep) === -1);

    // Map through the fields checking if any of them is `required: true`, if so, use `GraphQLNonNull`
    const fields = schema.fields.map(field => {
      if (!field.required) {
        return field;
      }

      // Add `GraphQLNonNull` to `addDependencies` import if it hasn't been added yet.
      // Won't push to `editDependencies` because it's already specified on the template file.
      if (addDependencies.indexOf('GraphQLNonNull') === -1) {
        addDependencies.push('GraphQLNonNull');
      }

      return _extends({}, field, {
        type: `GraphQLNonNull(${field.type})`
      });
    });

    return _extends({}, schema, {
      fields,
      addDependencies,
      editDependencies
    });
  }

  _getConfigDirectories() {
    return (0, _utils.getRelativeConfigDir)('mutation', ['model', 'type', 'loader', 'connection']);
  }

  generateMutation() {
    let schema = null;
    if (this.options.model) {
      const modelSchema = (0, _utils.getMongooseModelSchema)({ model: this.options.model });
      const deps = (0, _mongoose.getDependencies)(modelSchema.fields);
      schema = this._parseSchema(modelSchema, deps);
    }

    const name = (0, _ejsHelpers.uppercaseFirstLetter)(this.options.name);

    const mutations = {
      add: {
        fileName: `${name}Add`,
        template: {
          withSchema: 'MutationAddWithSchema.js.template',
          regular: 'MutationAdd.js.template'
        }
      },
      edit: {
        fileName: `${name}Edit`,
        template: {
          withSchema: 'MutationEditWithSchema.js.template',
          regular: 'MutationEdit.js.template'
        }
      }
    };

    const templateType = schema ? 'withSchema' : 'regular';
    const directories = this._getConfigDirectories();

    const templateVars = {
      name,
      camelCaseName: (0, _ejsHelpers.camelCaseText)(this.options.name),
      schema,
      directories
    };

    const moduleName = this.options.name.toLowerCase();
    const modulePath = (0, _paths.getModulePath)(this.destinationDir, moduleName);
    const mutationPath = (0, _paths.getMutationPath)(modulePath);

    Object.keys(mutations).forEach(mutationType => {
      const { template, fileName } = mutations[mutationType];

      const mutationFilePath = _path2.default.join(mutationPath, `${fileName}Mutation.js`);

      this.fs.copyTpl(this.templatePath(template[templateType]), mutationFilePath, templateVars);

      this._generateMutationTest({
        name,
        mutationName: fileName,
        template: template[templateType],
        schema
      });
    });
  }

  _generateMutationTest({ name, mutationName, template, schema }) {
    const templatePath = this.templatePath(`test/${template}`);

    const moduleName = this.options.name.toLowerCase();
    const modulePath = (0, _paths.getModulePath)(this.destinationDir, moduleName);
    const mutationPath = (0, _paths.getMutationPath)(modulePath);
    const mutationTestPath = (0, _paths.getTestPath)(mutationPath);

    const destinationPath = this.destinationPath(_path2.default.join(mutationTestPath, `${mutationName}Mutation.spec.js`));

    const directories = this._getConfigDirectories();

    const templateVars = {
      name,
      camelCaseName: (0, _ejsHelpers.camelCaseText)(name),
      mutationName,
      schema,
      directories
    };

    this.fs.copyTpl(templatePath, destinationPath, templateVars);
  }

  end() {
    this.log('ðŸ”¥ Mutation created!');
  }
}

module.exports = MutationGenerator;