'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseFieldToGraphQL = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ejsHelpers = require('../ejsHelpers');

const MONGOOSE_TYPE_TO_GRAPHQL_TYPE = {
  Number: 'GraphQLInt', // it could be a GraphQLFloat
  Boolean: 'GraphQLBoolean',
  Date: 'GraphQLString',
  ObjectId: 'GraphQLID',
  DEFAULT: 'GraphQLString'
};

const getGraphQLTypeFromMongooseType = (mongooseType, mongooseChildType) => {
  return mongooseType in MONGOOSE_TYPE_TO_GRAPHQL_TYPE ? MONGOOSE_TYPE_TO_GRAPHQL_TYPE[mongooseType] : MONGOOSE_TYPE_TO_GRAPHQL_TYPE.DEFAULT;
};

const MONGOOSE_TYPE_TO_FLOWTYPE = {
  Number: 'number',
  Boolean: 'boolean',
  Date: 'Date',
  ObjectId: 'string',
  DEFAULT: 'string'
};

const getFlowtypeFromMongooseType = (mongooseType, mongooseChildType) => {
  if (mongooseType === 'Array') {
    const flowtype = mongooseChildType in MONGOOSE_TYPE_TO_FLOWTYPE ? MONGOOSE_TYPE_TO_FLOWTYPE[mongooseChildType] : MONGOOSE_TYPE_TO_FLOWTYPE.DEFAULT;

    return `${flowtype}[]`;
  }

  return mongooseType in MONGOOSE_TYPE_TO_FLOWTYPE ? MONGOOSE_TYPE_TO_FLOWTYPE[mongooseType] : MONGOOSE_TYPE_TO_FLOWTYPE.DEFAULT;
};

const parseFieldToGraphQL = exports.parseFieldToGraphQL = (field, ref) => {
  const graphQLField = {
    name: field.name,
    description: field.description,
    required: !!field.required,
    originalType: field.type,
    resolve: `obj.${field.name}`
  };

  const name = (0, _ejsHelpers.uppercaseFirstLetter)(field.name);
  const typeFileName = field.ref ? `${field.ref}Type` : `${name}Type`;
  const loaderFileName = field.ref ? `${field.ref}Loader` : `${name}Loader`;;

  let parsedChildField;
  let typeFileNameSingular;
  let loaderFileNameSingular;

  switch (field.type) {
    case 'Number':
      return _extends({}, graphQLField, {
        type: getGraphQLTypeFromMongooseType(field.type),
        flowType: getFlowtypeFromMongooseType(field.type)
      });
    case 'Boolean':
      return _extends({}, graphQLField, {
        type: getGraphQLTypeFromMongooseType(field.type),
        flowType: getFlowtypeFromMongooseType(field.type)
      });
    case 'Array':
      field.type = field.childType;

      parsedChildField = parseFieldToGraphQL(field, ref);
      parsedChildField.flowType = getFlowtypeFromMongooseType('Array', parsedChildField.type);
      parsedChildField.type = [parsedChildField.type];

      if (field.childType === 'ObjectId' && ref) {
        typeFileNameSingular = `${field.ref}Type`;
        loaderFileNameSingular = `${field.ref}Loader`;

        parsedChildField = _extends({}, parsedChildField, {
          type: [typeFileNameSingular],
          resolve: `await ${loaderFileNameSingular}.load${name}ByIds(context, obj.${field.name})`,
          resolveArgs: 'async (obj, args, context)',
          graphqlType: typeFileNameSingular,
          graphqlLoader: loaderFileNameSingular
        });
      }

      // TODO - review this
      parsedChildField.listType = parsedChildField.type[0];
      parsedChildField.type = `GraphQLList(${parsedChildField.type[0]})`;

      return parsedChildField;
    case 'ObjectId':
      if (ref) {
        return _extends({}, graphQLField, {
          type: typeFileName,
          flowType: 'string',
          resolve: `await ${loaderFileName}.load(context, obj.${field.name})`,
          resolveArgs: 'async (obj, args, context)',
          graphqlType: typeFileName,
          graphqlLoader: loaderFileName
        });
      }

      return _extends({}, graphQLField, {
        type: getGraphQLTypeFromMongooseType(field.type),
        flowType: getFlowtypeFromMongooseType(field.type)
      });
    case 'Date':
      return _extends({}, graphQLField, {
        type: getGraphQLTypeFromMongooseType(field.type),
        flowType: getFlowtypeFromMongooseType(field.type),
        resolve: `obj.${field.name} ? obj.${field.name}.toISOString() : null`
      });
    default:
      return _extends({}, graphQLField, {
        type: getGraphQLTypeFromMongooseType(field.type),
        flowType: getFlowtypeFromMongooseType(field.type)
      });
  }
};