'use strict';

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

var _config = require('../config');

var _ejsHelpers = require('../ejsHelpers');

var _paths = require('../paths');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LoaderGenerator extends _yeomanGenerator2.default {
  constructor(args, options) {
    super(args, options);

    this.argument('name', {
      type: String,
      required: true
    });

    this.argument('model', {
      type: String,
      required: false
    });

    this.destinationDir = (0, _config.getConfigDir)('loader');
  }

  _getConfigDirectories() {
    return (0, _utils.getRelativeConfigDir)('loader', ['model', 'connection']);
  }

  generateLoader() {
    const schema = this.options.model ? (0, _utils.getMongooseModelSchema)({ model: this.options.model, withTimestamps: true }) : null;

    const name = (0, _ejsHelpers.uppercaseFirstLetter)(this.options.name);

    const templatePath = schema ? this.templatePath('LoaderWithSchema.js.template') : this.templatePath('Loader.js.template');

    const directories = this._getConfigDirectories();

    const pluralName = (0, _pluralize2.default)(this.options.name);

    const moduleName = this.options.name.toLowerCase();
    const modulePath = (0, _paths.getModulePath)(this.destinationDir, moduleName);

    const destinationPath = this.destinationPath(_path2.default.join(modulePath, `${name}Loader.js`));
    const templateVars = {
      name,
      rawName: this.options.name,
      pluralName,
      pluralCamelCaseName: (0, _ejsHelpers.camelCaseText)(pluralName),
      schema,
      directories
    };

    this.fs.copyTpl(templatePath, destinationPath, templateVars);
  }

  end() {
    this.log('ðŸ”¥ Loader created!');
  }
}


module.exports = LoaderGenerator;