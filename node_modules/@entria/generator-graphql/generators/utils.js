'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMongooseModelSchema = exports.getRelativeConfigDir = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _config = require('./config');

var _mongoose = require('./parser/mongoose');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get the relative path directory between two directories specified on the config file
 * @param from {string} The calling directory of the script
 * @param to {[string]} The destination directories
 * @returns {string} The relative path, e.g. '../../src'
 */
const getRelativeConfigDir = exports.getRelativeConfigDir = (from, to) => {
  const config = (0, _config.getCreateGraphQLConfig)().directories;

  return to.reduce((directories, dir) => {
    const relativePath = _path2.default.posix.relative(config[from], config[dir]);

    return _extends({}, directories, {
      [dir]: relativePath === '' ? '.' : relativePath
    });
  }, {});
};

/**
 * Get the Mongoose model schema code
 * @param modelPath {string} The path of the Mongoose model
 * @returns {string} The code of the Mongoose model
 */
const getModelCode = modelPath => _fs2.default.readFileSync(modelPath, 'utf8');

const getMongooseModelSchema = exports.getMongooseModelSchema = ({
  model,
  withTimestamps = false,
  ref = false
}) => {
  const config = (0, _config.getCreateGraphQLConfig)();

  const modelDir = config.directories.model;

  const modelPath = _path2.default.resolve(`${modelDir}/${model.toLowerCase()}/${model}Model.js`);

  const modelCode = getModelCode(modelPath);

  return (0, _mongoose.getSchemaDefinition)(modelCode, withTimestamps, ref);
};