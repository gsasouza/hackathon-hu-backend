'use strict';

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

var _config = require('../config');

var _ejsHelpers = require('../ejsHelpers');

var _paths = require('../paths');

var _mongoose = require('../parser/mongoose');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TypeGenerator extends _yeomanGenerator2.default {
  constructor(args, options) {
    super(args, options);

    this.argument('name', {
      type: String,
      required: true
    });

    this.argument('model', {
      type: Object,
      required: false
    });

    this.destinationDir = (0, _config.getConfigDir)('type');
  }

  generateType() {
    const schema = this.options.model ? (0, _utils.getMongooseModelSchema)({
      model: this.options.model,
      withTimestamps: true,
      ref: true
    }) : null;

    const directories = this._getConfigDirectories();

    const name = (0, _ejsHelpers.uppercaseFirstLetter)(this.options.name);
    const typeFileName = `${name}Type`;

    const templatePath = schema ? this.templatePath('TypeWithSchema.js.template') : this.templatePath('Type.js.template');

    const moduleName = this.options.name.toLowerCase();
    const modulePath = (0, _paths.getModulePath)(this.destinationDir, moduleName);

    const relativePath = _path2.default.join(modulePath, `${typeFileName}.js`);

    const destinationPath = this.destinationPath(relativePath);

    const deps = schema ? (0, _mongoose.getDependencies)(schema.fields) : null;

    const src = (0, _config.getConfigDir)(_config.DIRECTORY_TYPE.SRC);

    const depsMap = deps ? (0, _mongoose.getDependenciesPath)(this.destinationPath(src), [...deps.typeDependencies, ...deps.loaderDependencies], relativePath) : null;

    const templateVars = {
      name,
      schema,
      dependencies: deps ? deps.dependencies : null,
      depsMap,
      directories
    };

    this._generateTypeTest({
      name,
      schema,
      depsMap
    });

    this.fs.copyTpl(templatePath, destinationPath, templateVars);
  }

  _getConfigDirectories() {
    return (0, _utils.getRelativeConfigDir)('type', ['model', 'type', 'loader', 'connection', 'interface']);
  }

  _generateTypeTest({ name, schema, depsMap }) {
    const templatePath = this.templatePath('test/Type.js.template');

    const moduleName = this.options.name.toLowerCase();
    const testPath = (0, _paths.getTestPath)((0, _paths.getModulePath)(this.destinationDir, moduleName));

    const destinationPath = this.destinationPath(_path2.default.join(testPath, `${name}Type.spec.js`));

    const directories = this._getConfigDirectories();

    const templateVars = {
      name,
      schema,
      depsMap,
      directories
    };

    this.fs.copyTpl(templatePath, destinationPath, templateVars);
  }

  end() {
    this.log('ðŸ”¥ Type created!');
  }
}


module.exports = TypeGenerator;