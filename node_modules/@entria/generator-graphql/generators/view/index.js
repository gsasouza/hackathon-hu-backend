'use strict';

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

var _utils = require('../utils');

var _config = require('../config');

var _ejsHelpers = require('../ejsHelpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ViewGenerator extends _yeomanGenerator2.default {
  constructor(args, options) {
    super(args, options);

    this.argument('name', {
      type: String,
      required: true
    });

    // TODO read schema.json

    this.destinationDir = (0, _config.getConfigDir)('view');
  }

  _getConfigDirectories() {
    return (0, _utils.getRelativeConfigDir)('loader', ['model', 'connection']);
  }

  generateList() {
    // const schema = this.options.model ?
    //   getMongooseModelSchema(this.options.model, true)
    //   : null;

    const name = (0, _ejsHelpers.uppercaseFirstLetter)(this.options.name);

    const templatePath = this.templatePath('View.js.template');

    // const templatePath = schema ?
    //   this.templatePath('LoaderWithSchema.js.template')
    //   : this.templatePath('Loader.js.template');
    //
    // const directories = this._getConfigDirectories();

    const pluralName = (0, _pluralize2.default)(this.options.name);

    const destinationPath = this.destinationPath(`${this.destinationDir}/${name}View.js`);
    const templateVars = {
      name,
      rawName: this.options.name,
      camelCaseName: (0, _ejsHelpers.camelCaseText)(name),
      pluralName,
      pluralCamelCaseName: (0, _ejsHelpers.camelCaseText)(pluralName)
    };

    this.fs.copyTpl(templatePath, destinationPath, templateVars);
  }

  end() {
    this.log('ðŸ”¥ View created!');
  }
}

module.exports = ViewGenerator;