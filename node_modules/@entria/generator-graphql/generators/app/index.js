'use strict';

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _graphqlLogo = require('../graphql-logo');

var _graphqlLogo2 = _interopRequireDefault(_graphqlLogo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const tic = _chalk2.default.green('âœ“');

const tac = _chalk2.default.red('âœ—');
const commitHash = '4a0eab74f021bac16e626c0ebc9fddec3d4d8c7e';

class AppGenerator extends _yeomanGenerator2.default {
  constructor(args, options) {
    super(args, options);

    this.argument('name', {
      type: String,
      required: true
    });

    this.dir = _path2.default.resolve(this.options.name);
  }

  initializing() {
    this.spinner = (0, _ora2.default)();

    this._printGraphQLLogo();
  }

  cloneStarterCode() {
    this.spinner.start();

    this._validateDirectory();

    this.spinner.text = 'Creating a new GraphQL project...';

    const repository = 'https://github.com/entria/graphql-dataloader-boilerplate.git';

    const done = this.async();
    const command = 'git';
    const commandOpts = ['clone', repository, this.dir];
    const checkoutCommandOpts = ['checkout', commitHash];

    this.spawnCommand(command, commandOpts, { stdio: 'ignore' }).on('close', () => {
      _shelljs2.default.cd(this.dir);

      this.spawnCommand(command, checkoutCommandOpts, { stdio: 'ignore' }).on('close', () => {
        this.spinner.stop();

        this.log(`${tic} GraphQL project ${this.options.name} created.`);

        done();
      });
    });
  }

  _printGraphQLLogo() {
    this.log(_chalk2.default.magenta(_graphqlLogo2.default));
  }

  _validateDirectory() {
    try {
      _fs2.default.lstatSync(this.dir).isDirectory();

      this._logAndExit(`${tac} Directory "${this.options.name}" already exists,
        please enter a new directory name or delete "${this.options.name}"!`);

      return false;
    } catch (err) {
      return true;
    }
  }

  installModules() {
    _shelljs2.default.cd(this.dir);

    this.spinner.start();

    this.spinner.text = 'Installing dependencies...';

    const done = this.async();
    let command = 'yarn';
    let args = [];

    if (!_shelljs2.default.which('yarn')) {
      command = 'npm';
      args = ['install'];
    }

    this.spawnCommand(command, args, { stdio: 'ignore' }).on('close', () => {
      this.spinner.stop();

      this.log(`${tic} Dependencies installed! ðŸ˜Ž`);

      done();
    });
  }

  _cleanDir() {
    _shelljs2.default.cd(this.dir);

    _shelljs2.default.rm('-rf', '.git');
  }

  _logAndExit(message) {
    this.spinner.stop();

    this.log(message);

    process.exit(1);
  }

  end() {
    this._cleanDir();

    this.log(`${tic} Your new project with GraphQL has been created! ðŸ”¥`);
  }

}

module.exports = AppGenerator;