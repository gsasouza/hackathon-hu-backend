'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.default =

function (graphqlHTTPMiddleware) {var formatErrorFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _graphql.formatError;
	return function (context, next) {var
		response = context.response,request = context.request;

		response.type =
		'application/json';

		return Promise.all(
		request.body.map(function (data) {
			/*
                                    	create stub request, response and context
                                    	to fake usual objects for the GraphQL middleware
                                    */
			var subRequest = _extends({
				__proto__:
				request.__proto__ },
			request, {
				body:
				data });

			var subResponse = _extends({
				__proto__:
				response.__proto__ },
			response);

			var subContext = _extends({},
			context, {
				response:
				subResponse,
				request:
				subRequest,
				req:
				subRequest,
				res:
				subResponse });


			return graphqlHTTPMiddleware(subContext).
			then(function () {
				return {
					id:
					data.id,
					status:
					subContext.response.status,
					payload:
					subContext.response.body };

			});
		})).
		then(function (responses) {
			return {
				/* use last given status */
				status:
				responses.reduce(
				function (last, _ref) {var status = _ref.status;return status || last;},
				200),

				/* each payload is already a JSON string, so JSON.stringify would not work as intended */
				body: '[' +
				responses.map(function (_ref2) {var id = _ref2.id,payload = _ref2.payload;
					return '{ "id": "' + id + '", "payload": ' + payload + ' }';
				}).join(', ') + ']' };


		}).catch(function (error) {
			/* batching error: return errors */
			return {
				status:
				500,
				body: request.body.map(function (_ref3) {var id = _ref3.id;
					return {
						id: id,
						payload: JSON.stringify({
							errors:
							[formatErrorFn(error)] }) };


				}) };

		}).then(function (_ref4) {var status = _ref4.status,body = _ref4.body;
			response.status =
			status;
			response.body =
			body;
		}).then(
		next);

	};
};var _graphql = require('graphql');